<?php

namespace common\models;

use common\models\mongo\Products;
use Yii;
use common\models\elastic\AllProducts;
use yii\helpers\ArrayHelper;
use yii\helpers\FileHelper;

/**
 * This is the model class for table "abh_addlfeild".
 *
 * @property integer $id
 * @property integer $id_gods
 * @property integer $id_post
 * @property string $key_feild
 * @property string $value
 */
class Addlfeild extends \yii\db\ActiveRecord
{
    public $article;
    public $country;
    public $delivery;
    public $keywords;
    public $composition;
    public $size;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'abh_addlfeild';
    }
    const SCENARIO_ALL = 'create';
    const SCENARIO_REQUIRE = 'createrequired';

    public function scenarios()
    {
        $scenarios = parent::scenarios();
        $scenarios[self::SCENARIO_ALL] = ['id_gods', 'id_post','key_feild','value'];
        $scenarios[self::SCENARIO_REQUIRE] = ['composition','keywords','delivery','country','article','id_gods'];
        return $scenarios;
    }


    public static $fields=[
        'article' => 'Артикул',
        'site'=>'Сайт поставщика',
        'size1'=>'Размер',
        'size2'=>'Двойной размер',
        'size3'=>'Евро размер',
        'size4'=>'Семейный размер',
        'size5'=>'Первый дополнительный размер',
        'size6'=>'Второй дополнительный размер',
        'color'=>'Цвет',
        'code_provider'=>'Код поставщика',
        'link_site'=>'Ссылка на сайт',
        'name_provider'=>'Имя поставщика',
        'contact_provider'=>'Контакты поставщика',
        'title'=>'Заголовок',
        'description'=>'Мета Описание',
        'keywords'=>'Ключевые слова',
        'delivery'=>'Доставка',
        'country'=>'Страна производитель',
        'composition'=>'Состав',
        'winter'=>'Зима',
        'spring'=>'Весна',
        'summer'=>'Лето',
        'fall'=>'Осень',
        'shop'=>'Магазин',
    ];

    public static $season=[
        'winter'=>'Зима',
        'spring'=>'Весна',
        'summer'=>'Лето',
        'fall'=>'Осень',
        ];


    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['id_gods', 'id_post','id_page'], 'integer'],
            [['key_feild','composition','keywords','delivery','country','article'], 'required'],
            [['key_feild'], 'string', 'max' => 255],
            [['composition','delivery','country','article','size'], 'string', 'max' => 610],
            [['keywords','value'],'string', 'max' => 1500]
        ];
    }
    /*
    public function afterSave($insert, $changedAttributes)
    {
        $product=Products::find()->where(['product_id'=>(int)$this->id_gods])->one();
        $add=$product->addFeild;
        $key=$this->key_feild;
        $add[$key]=$this->value;
        $product->addFeild = $add;
        $product->save();
    }

    public function afterDelete()
    {
        $product=Products::find()->where(['product_id'=>(int)$this->id_gods])->one();

        parent::afterDelete(); // TODO: Change the autogenerated stub
    }*/

    public function canViewsValue($model){
        if($model->key_feild=='site'){
            if(Yii::$app->user->can('canViewsSite')){
                return $model->value;
            }else{
                return false;
            }
        }else{
            Yii::error($model->value=='0');
            return ($model->value=='0'||$model->value=='1')?'выбран':$model->value;
        }
    }
    public function canViewsKeyFeild($model){
        if($model->key_feild=='site'){
            if(Yii::$app->user->can('canViewsSite')){
                return $model->key_feild;
            }else{
                return false;
            }
        }else{
            if(!empty(self::$fields[$model->key_feild]))
                return self::$fields[$model->key_feild];
            return self::$season[$model->key_feild];
        }
    }

    public function requereSave($post,$id){
        $arrError=array();
        if(isset($post['country'])) {
            $country = new Addlfeild([
                'scenario' => Addlfeild::SCENARIO_ALL,
                'key_feild' =>  'country',
                'id_gods'   =>  $id,
                'value'     =>  $post['country']
            ]);
            if($country->save()){}else{
               $arrError[]=$country->getErrors();
            }
        }
        if(isset($post['composition'])) {
            $composition = new Addlfeild([
                'scenario' => Addlfeild::SCENARIO_ALL,
                'key_feild' =>  'composition',
                'id_gods'   =>  $id,
                'value'     =>  $post['composition']
            ]);
            if($composition->save()){}else{
               $arrError[]=$composition->getErrors();
            }
        }
        if(isset($post['size'])) {
            $composition = new Addlfeild([
                'scenario' => Addlfeild::SCENARIO_ALL,
                'key_feild' =>  'size1',
                'id_gods'   =>  $id,
                'value'     =>  $post['size']
            ]);
            if($composition->save()){}else{
               $arrError[]=$composition->getErrors();
            }
        }
        if(isset($post['keywords'])) {
            $composition = new Addlfeild([
                'scenario' => Addlfeild::SCENARIO_ALL,
                'key_feild' =>  'keywords',
                'id_gods'   =>  $id,
                'value'     =>  $post['keywords']
            ]);
            if($composition->save()){}else{
               $arrError[]=$composition->getErrors();
            }
        }
        if(isset($post['delivery'])) {
            $composition = new Addlfeild([
                'scenario' => Addlfeild::SCENARIO_ALL,
                'key_feild' =>  'delivery',
                'id_gods'   =>  $id,
                'value'     =>  $post['delivery']
            ]);
            if($composition->save()){}else{
               $arrError[]=$composition->getErrors();
            }
        }
        if(isset($post['article'])) {
            $composition = new Addlfeild([
                'scenario' => Addlfeild::SCENARIO_ALL,
                'key_feild' =>  'article',
                'id_gods'   =>  $id,
                'value'     =>  $post['article']
            ]);
            if($composition->save()){}else{
               $arrError[]=$composition->getErrors();
            }
        }
        if(empty($arrError)){
            return false;
        }else{
            return $arrError;
        }
    }

    public function addColor($color,$id){
        if(preg_match('/,%%,/',$color)){
            $mathes=explode(',%%,',$color);
            foreach ($mathes as $math){
                $addfeild= new Addlfeild([
                    'key_feild' =>'color',
                    'id_gods'   => $id,
                    'value'     => $math
                ]);
                $addfeild->save();
            }
        }else{
            $addfeild=new Addlfeild();
            $addfeild->key_feild='color';
            $addfeild->id_gods=$id;
            $addfeild->value=$color;
            $addfeild->save();
        }
    }
    public function delColor($color,$id){
        if(preg_match('/,%%,/',$color)){
            $mathes=explode(',%%,',$color);
            foreach ($mathes as $math){
                $delcolor=Addlfeild::findOne(['key_feild'=>'color','id_gods'=>$id,'value'=>$math]);
                if(isset($delcolor)){
                $delcolor->delete();}
            }
        }else{
            $delcolor=Addlfeild::findOne(['key_feild'=>'color','id_gods'=>$id,'value'=>$color]);
            if(isset($delcolor)){
            $delcolor->delete();}
        }
    }

    public function getGoods(){
        return $this->hasOne(Gods::className(),['id'=>'id_gods']);
    }

    public function getFrontendSetup(){
        return $this->hasOne(FrontendSetup::className(),['vaelye'=>'value']);
    }

    public function getSessonField(){
        return self::$season[$this->key_feild];
    }

    public static function seasonArraySelect($seasons){
        if(is_array($seasons)){
            $result =ArrayHelper::map($seasons,'key_feild','sessonField');
            return $result;
        }
        return self::$season;
    }

    public static function getSessonKey($value){
        return array_search($value,self::$season);
    }

    public static function getAllSessonKey(){
        return key(self::$season);
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'id_gods' => 'Id Gods',
            'id_post' => 'Id Post',
            'id_page'   =>  'Id Page',
            'key_feild' => Yii::t('backend','KEYFEILD'),
            'value' => Yii::t('backend','VALUE'),
            'composition' => Yii::t('backend','composition'),
            'keywords' => Yii::t('backend','keywords'),
            'delivery' => Yii::t('backend','delivery'),
            'country' => Yii::t('backend','country'),
            'article' => Yii::t('backend','article'),
        ];
    }
}
